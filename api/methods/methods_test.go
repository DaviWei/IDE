// This file was generated by Gopher Sauce.
// UPDATE IT TO BETTER TEST YOUR CODE.
package methods

import (
	"github.com/thestrukture/IDE/types"
	"testing"
	"strings"
)

func TestBindMisc(t *testing.T) {

	expectedDex := types.Dex{Misc: "Foo"}

	
	dex := types.Dex{Misc: "bar"}

	dex = BindMisc("Foo", dex)

	if dex.Misc != expectedDex.Misc {
		t.Error("Expected ", expectedDex.Misc, " got ", dex.Misc)
	}

}

func TestListPlugins(t *testing.T) {

	list := ListPlugins()

	if list == nil {
		t.Error("Expected ", []string{}, " got ", list)
	}
	
}

func TestBindID(t *testing.T) {
	expectedDex := types.Dex{Misc: "ID"}

	
	dex := types.Dex{Misc: "bar"}

	dex = BindMisc("ID", dex)

	if dex.Misc != expectedDex.Misc {
		t.Error("Expected ", expectedDex.Misc, " got ", dex.Misc)
	}
}

func TestRandTen(t *testing.T) {

	expectedLength := 10

	randomTen := RandTen()

	if len(randomTen) != expectedLength {
		t.Error("Expected length ", expectedLength, " got ", len(randomTen) )
	}

}

func TestFragmentize(t *testing.T) {

	expectedString := "Foo"

	result := Fragmentize("Foo.tmpl")

	if result != expectedString {
		t.Error("Expected ", expectedString, " got ", result)
	}
}


func TestParseLog(t *testing.T) {

	expectedString := "The line is located in your package template pipelines at line: 22"

	result := ParseLog("meth:22")

	if result != expectedString {
		t.Error("Expected ", expectedString, " got ", result)
	}
}


func TestAnyBugs(t *testing.T) {





}
func TestPluginJS(t *testing.T) {

	shouldContain := []string{
		"<script",
		"</script>",
	}

	pluginJS := PluginJS()

	for _, compare := range shouldContain {
		if !strings.Contains(pluginJS, compare) {
			t.Error("Expected plugin string to contain ", compare)
		}
	}

}


func TestFindmyBugs(t *testing.T) {

	bugList := FindmyBugs("Foo")

	if bugList == nil {
		t.Error("Expected ", []types.DebugObj{}, " got ", bugList)
	}
}


func TestIsExpired(t *testing.T) {

}

func TestGetTemplate(t *testing.T) {

}

func TestMConsole(t *testing.T) {

}

func TestMPut(t *testing.T) {

}

func TestUpdateApp(t *testing.T) {

}

func TestGetApp(t *testing.T) {

}
