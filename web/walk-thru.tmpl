<!DOCTYPE html>
<html class="full-height" lang="en">
  <head>
    <!-- Required meta tags always come first -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Walk thru - The Strukture</title>
    <!-- Bootstrap CSS -->
    <link rel="shortcut icon" href="/img/logo.png" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/dist/css.css" />
    <link rel="stylesheet" href="/dist/jquery.fullPage.css" />
  </head>
  <body class="full-height">
     {{Css}}

    {{NavPromo}}

    <div class="container-fluid full-height" >
      
      <div class="row full-height over-flow-fix">
        <div class="col-sm-3 text-right full-height inverted-h over-flow-fix" >
          <h1 class="text-xs-center"><i class="fa fa-time-o"></i> Walk through</h1>
          <ul class="nav">
          <!-- <li class="nav-item">
            <a class="nav-link" href="#">Intro</a>
          </li> -->
           <li class="nav-item">
            <a class="nav-link" href="#package"><i class="fa fa-globe"></i> Packages</a>
          </li>
           <li class="nav-item">
            <a class="nav-link" href="#struct"><i class="fa fa-share-alt"></i> Structs</a>
          </li>
           <li class="nav-item">
            <a class="nav-link" href="#object"><i class="fa fa-share-alt-square"></i> Objects</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#method"><i class="fa fa-exchange"></i> Methods</a>
          </li>
           <li class="nav-item">
            <a class="nav-link" href="#middleware"><i class="fa fa-circle-o-notch"></i> Working Middleware</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#templates"><i class="fa fa-diamond"></i> Leverage templates</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="#web"><i class="fa fa-archive"></i> Understand Web resources</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="#server"><i class="fa fa-server"></i> Server compiler</a>
          </li>
             <li class="nav-item">
            <a class="nav-link" href="#terminal"><i class="fa fa-terminal"></i> Terminal</a>
          </li>


         
        </ul>
        </div>
        <div class="col-sm-9 full-height over-flow-fix">
          <h2>Diving in</h2>
          <p class="text-muted" style="margin-bottom:3em;"> Welcome to the Strukture, this guide will make the transition to using our online IDE quick and seamless. We recommend reading about <a href="https://golang.org/">Golang</a> before proceeding</p>
          
          <div class="row">
            <div class="col-sm-4"><img src="/img/help/nav.png" class="btn-block"></div>
            <div class="col-sm-8">
              <h2>Moving around</h2>
              <p>If an item is editable click on it, to discover more features available to an item right click on it.</p>
              <p>Within text editors use <code>ctrl + space</code> for autocomplete.</p>
            </div>
          </div>
          <div id="package"></div>
          <h1>Packages</h1>
          <p>One package on Strukture is the equivalent of one app. It is within this package that you, the user will write out your webapp. Once logged in, there should a blue button that states 'new package' within your Strukture home screen. A modal will show up, and follow the prompt.</p>

           <div id="struct"></div>
          <h1>Structs</h1>

          <p>Structs are essential in building any app with Strukture. They are used as data models for templates, objects and even MongoDB. Which makes the burden of using keys with DB objects a relic of the past.</p>
          <h3>Create new struct</h3>
          <p>*Detailed diagram</p>
          <div class="text-xs-center"><img src="/img/help/struct.png" class="btn btn-block"></div>
          <h4>Diagram key</h4>
          <p>1. Structs tab</p>
          <p>2. Struct name field. Used as input for search and quick inserting a new struct.</p>
          <p>3. Button toolbar. From left to right, the first button is Search, will attempt to find a struct named similar to the value inputed. The second is the quick insert, will add a struct xml node for you. The last button is the save button, which will commit the data you entered.</p>
          <p>4. Your struct's attributes.</p>
           <div id="object"></div>
          <h1>Objects</h1>
          <p>Objects will allow you to take your structs a step closer to your average programming 'class'. It allows for the execution of methods with direct access to the struct.</p>
          <p>*Detailed Diagram</p>
          <div class="text-xs-center"><img src="/img/help/object.png" class="btn btn-block"></div>
          <h4>Diagram key</h4>
          <p>1. Objects tab</p>
          <p>2. Object name field. Used as input for searching or quick inserting a object.</p>
          <p>3. Button toolbar. From left to right, the first button is Search, will attempt to find a Object named similar to the value inputed. The second is the quick insert, will add a object xml node for you. The last button is the save button, which will commit the data you entered.</p>
          <p>4. Your object's methods, the attributes will be inherited from the specified struct.</p>
           <div id="method"></div>
           <h1>Methods</h1>
           <p>Think of your methods as a group of command line functions executed on demand. With Strukture any method added can be used directly within Templates after compiling your package. To use em' locally with other functions, in a Golang context simply add the 'net_' prefix. (right-click on Package and click build)</p>
           <p>*Detailed diagram</p>
           <div class="text-xs-center"><img src="/img/help/method.png" class="btn btn-block"></div>
           <h4>Diagram key</h4>
           <p>1. Methods tab</p>
           <p>2. Method name field, is used to quick add a function and in conjuction with the search button to help you move around faster.</p>
           <p>3. Button toolbar. From left to right, the first button is Search, will attempt to find a Method named similar to the value inputed. The second is the quick insert, will add a method xml node for you. The last button is the save button, which will commit the data you entered.</p>
           <p>4. Your method's arguments, written directly in Golang.</p>
          <div id="middleware"></div>
          <h1> Working Middleware</h1>
          <p>Writing API endpoints is becoming more and more a requirement when it comes to building a modern webapp. Becoming increasingly known as middleware; can be used as web hooks for external apis, and even simpliying the process of writing functions behind endpoints requirements.</p>
          <p>*Detail Diagram</p>
           <div class="text-xs-center"><img src="/img/help/endpoints.png" class="btn btn-block"></div>
           <h4>Diagram key</h4>
           <p>1. Endpoints tab name</p>
           <p>2. Endpoint path input</p>
           <p>3. Save a new endpoint</p>
            <div id="templates"></div>
          <h1>Leverage templates</h1>
          <p>We really mean leverage templates; Reuse templates within your web root template files as well as even within templates. Structs allow for the easy mapping and loading of templates within your code. Remember a Golang function is created to initialize each struct, just remember this combination : 'net_b$YOURTEMPLATE'. Save time by building a library of elements as you move on with your project.</p>
          <p>*Detailed diagram</p>
          <div class="text-xs-center"><img src="/img/help/templates.png" class="btn btn-block"></div>
          <h4>Diagram key</h4>
          <p>1. Tab name</p>
          <p>2. Template struct input. This will tell the compiler which Struct to use with this template.</p>
          <p>3. HTML Code</p>
          <p>4. Apply the entered template name to the master configuration.</p>
          <p>5. Save the HTML code added.</p>
           <div id="web"></div>
          <h1>Understand Web resources</h1>
          <p> Move around your web resources like never before. Edit your frontend with all the features of the backend there. Mapped out functions appear within template pages in your web root, and are ready to be executed. A fileserver is spun up for all of your files within your '/dist/' folder.</p>
          <p>*Detailed diagram</p>
          <div class="text-xs-center"><img src="/img/help/web.png" class="btn btn-block"></div>
          <p>1. Web resource tab</p>
          <p>2. Preview link, and Save next to it</p>
          <p>3. Source code editor.</p>
          <p>4. We made finding the webroot easier, its the folder named '/' after expanding the Web Resource button. From there on keep moving forward.</p>
           <div id="server"></div>
          <h1>Server compiler</h1>
          <p>Once the ideas are out, its time to ignite the circuit for the first time. You can either right click on the root of your package to build to click on the compiler. We recommend building before testing template functions so that all of the structs,objects and methods are updated there as well. After testing Strukture has the capability of exporting a project as a zip file or binary. You choose.</p>
           <div id="terminal"></div>



          <div class="text-xs-center"><img src="/img/help/compiler.png" class="btn btn-block"></div>
          <h4>Diagram key</h4>
          <p>1. Tab name</p>
          <p>2. Download project will give you a full zip of your project.</p>
          <p>3. Download the binary of your application.</p>

            <div class="row">
          <div class="col-sm-6">
          <h1>Terminal</h1>
          <p>With terminal you have direct access to your docker container. You may execute any unix command within this shell. When you desire to execute something within a different directory us this modal <code>cd DIR && calls...</code></p>
          <p>Start your container with <code>rocstart</code></p>
           <p>Check the status your container with <code>rocstatus</code></p>
            <p>Stop your container with <code>rocstop</code></p>
            <p>Use the terminal to download packages with the default command  <code>go get $PKG</code></p>
          </div>
          <div class="col-sm-6">
            <img src="/img/help/term.png" style="width:100%;">
          </div>

            </div>
          <p><a href="/documentation" class="btn btn-block btn-warning">Level up <i class="fa fa-chevron-circle-right"></i></a></p>

        </div>
      </div>
    </div>

    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-78354422-1', 'auto');
  ga('send', 'pageview');

</script>
  	{{JS}}
  </body>
</html>